
# Create Base Path and Assign Libraries -----------------------------------

# Install packages
library(data.table)
library(tidyverse)

# Assign the base path
base_path <- "C:/Users/user/Desktop/Bat Data/Bat Data/BatData"


# Load in Translations ----------------------------------------------------

  # Read in all the translations csv
 # translations <- fread(file.path(base_path, "Data", "Species_Translations.csv")) %>%
    # Change all characters to factors.
  translations <- colnames(read_csv("Data/Species_Translations.csv") %>% 
    mutate_if(is.character, factor))


# Load and Modify Data ---------------------------------------------------------------
  
  # Load in the Stradbroke data
  dat <- read.csv("Data/All Stradbroke.csv") %>% 
    # Rename the MANUAL ID column to Manual ID
    rename(Manual.ID = MANUAL.ID) %>% 
    mutate(
      # Change year to a factor
      Year = factor(Year),
      # Change Manual ID to a factor
      Manual.ID = factor(Manual.ID),
      # Change the name of Wet Heathland
      Main.Habitat = ifelse(Main.Habitat == "wet heathland", "Wet Heathland", Main.Habitat)
           )
    
  # Create a list of all the variables we want to keep.
  dat_var_keep <- c("Year", "Fmin", "Fmean", "Fmax", "TIME", "HOUR", "Manual.ID", "Main.Habitat")
  
  # Don't know what I'm going to do with the time scales, might exclude from the model at this time.
  # Or ask ChatGPT how to add them together.

  # Modify the data so that only the columns with our "keep" variables remain.
  dat <- dat[, dat_var_keep] %>% 
    # Use separate_rows() to split rows where " and " is found
    separate_rows(Manual.ID, sep = "(?i) and |,") %>%
    # Retain all resulting rows without filtering anything out
    mutate(Manual.ID = str_trim(Manual.ID))  # Clean up any extra spaces
  
  
  

# Rename Misspells to Species Name -----------------------------------------

  # For each Unique value in the dataset
  for (i in unique(dat$Manual.ID)) {
    # Check if you want to change the variable. 
    cut <- menu(choices = c("Yes","No","Quit"), title = paste("Do you want to rename:",i,"?"))
    if (cut == 1)
    {
      print(paste("Rename:", i))
      paste_name <- translations[menu(choices = translations, title = paste("What should:", i, "be changed to?"))]
      dat <- dat %>% 
        mutate(Manual.ID = ifelse(Manual.ID == i, paste_name, Manual.ID))
      print(paste("Renamed", i, "to", paste_name))
    }
    # If answered no.
    else if (cut == 2)
    {
      # Change nothing and print that the value wasn't changed
      print(paste("Not renaming value:", i))
    }
    # If Answered Quit
    else if (cut == 3)
    {
      # Print that you're exiting the function.
      print("Quitting Program")
      break
    }
    
  }
       
  #Pseudo-Code
  # Sort all rows by Manual.ID
  

# Write data to CSV -------------------------------------------------------

  # Write data including Column Titles
  print("Modified Data Produced, Check Outputs folder")
  write_csv(dat, "Outputs/Modified_Stradbroke_Data.csv", col_names = TRUE)

  
