nchar(dat3$TIME[i])
)
}
}
View(dat3)
unique(dat3$TIME[which(nchar(dat3$TIME) > 5)])
unique(dat3$TIME)
max(c(1,3,7))
max(nchar(dat3$TIME))
# Read in all data CSV's with names from the csv_files object, which now contains 4 data frames.
dat <- dat %>%
# Combine them into one data frame
bind_rows() %>%
# Rename the MANUAL ID column to Manual ID
rename(Manual.ID = MANUAL.ID) %>%
mutate(
# Change year to a factor
Year = factor(Year),
# Change Manual ID to a factor
Manual.ID = factor(Manual.ID),
# Change the name of Wet Heathland
Main.Habitat = ifelse(Main.Habitat == "wet heathland", "Wet Heathland", Main.Habitat)
)
# Add all .csv files from Data folder into a single object
csv_files <- list.files("Data", pattern = "\\.csv$", full.names = TRUE)
# Remove the from the object the our Species Translations
csv_files <- csv_files[!grepl("Species_Translations\\.csv$", csv_files)]
# Create a list of all the variables we want to keep.
dat_var_keep <- c("Year", "Fmin", "Fmean", "Fmax", "TIME", "HOUR", "MANUAL.ID", "Main.Habitat")
# Load in the Stradbroke data, to a large list DF
dat <- lapply(csv_files, read.csv, na.strings = c(""))
# Remove all rows that don't belong to dat_var_keep
dat <- lapply(dat, function(df) df[, dat_var_keep, drop = FALSE])
# Read in all data CSV's with names from the csv_files object, which now contains 4 data frames.
dat <- dat %>%
# Combine them into one data frame
bind_rows() %>%
# Rename the MANUAL ID column to Manual ID
rename(Manual.ID = MANUAL.ID) %>%
mutate(
# Change year to a factor
Year = factor(Year),
# Change Manual ID to a factor
Manual.ID = factor(Manual.ID),
# Change the name of Wet Heathland
Main.Habitat = ifelse(Main.Habitat == "wet heathland", "Wet Heathland", Main.Habitat)
)
# Clean up the Time Column ----
# Remove AM/PM, milliseconds and instances where the hour is included in the TIME column.
dat %>%
mutate(
TIME = trimws(
# Removes the AM or PM (case insensitive) suffixes from the end of the string.
# Including AM or PM cases that have one or zero spaces before it "\\s?"
# Also trims the white spaces
sub("\\s?(AM|PM)+$", "", TIME, ignore.case = TRUE)
),
# Within the TIME column
# trim the milliseconds from the TIME data.
TIME = sub("\\.\\d+$", "", TIME)
)
unique(dat$TIME)
dat$TIME[i] <- substr(
dat$TIME[i],
(nchar(dat$TIME[i]) - 4),
nchar(dat$TIME[i])
)
-remove(dat2)
-remove(dat3)
# Load in the Stradbroke data, to a large list DF
dat <- lapply(csv_files, read.csv, na.strings = c(""))
# Remove all rows that don't belong to dat_var_keep
dat <- lapply(dat, function(df) df[, dat_var_keep, drop = FALSE])
# Read in all data CSV's with names from the csv_files object, which now contains 4 data frames.
dat <- dat %>%
# Combine them into one data frame
bind_rows() %>%
# Rename the MANUAL ID column to Manual ID
rename(Manual.ID = MANUAL.ID) %>%
mutate(
# Change year to a factor
Year = factor(Year),
# Change Manual ID to a factor
Manual.ID = factor(Manual.ID),
# Change the name of Wet Heathland
Main.Habitat = ifelse(Main.Habitat == "wet heathland", "Wet Heathland", Main.Habitat)
)
# Clean up the Time Column ----
# Remove AM/PM, milliseconds and instances where the hour is included in the TIME column.
dat %>%
mutate(
TIME = trimws(
# Removes the AM or PM (case insensitive) suffixes from the end of the string.
# Including AM or PM cases that have one or zero spaces before it "\\s?"
# Also trims the white spaces
sub("\\s?(AM|PM)+$", "", TIME, ignore.case = TRUE)
),
# Within the TIME column
# trim the milliseconds from the TIME data.
TIME = sub("\\.\\d+$", "", TIME)
)
# Clean up the Time Column ----
# Remove AM/PM, milliseconds and instances where the hour is included in the TIME column.
dat <- dat %>%
mutate(
TIME = trimws(
# Removes the AM or PM (case insensitive) suffixes from the end of the string.
# Including AM or PM cases that have one or zero spaces before it "\\s?"
# Also trims the white spaces
sub("\\s?(AM|PM)+$", "", TIME, ignore.case = TRUE)
),
# Within the TIME column
# trim the milliseconds from the TIME data.
TIME = sub("\\.\\d+$", "", TIME)
)
unique(dat$TIME)
# Remove the hours so that all time is presented in minutes and seconds.
# For each row in dat
for (i in 1:nrow(dat)) {
if (nchar(dat$TIME[i]) > 5) {
dat$TIME[i] <- substr(
dat$TIME[i],
(nchar(dat$TIME[i]) - 4),
nchar(dat$TIME[i])
)
}
}
unique(dat$TIME)
View(dat)
?paste
dat2 <- dat
# Add time hours and minutes togehter
dat2 <- dat2 %>% mutate(
pass_time = paste(dat$HOUR, dat$TIME, collapse = ":")
)
View(dat2)
?sapply
dat2 <- dat
# Add time hours and minutes togehter
dat2 <- dat2 %>% mutate(
pass_time = paste(dat$HOUR, dat$TIME, collapse = NULL)
)
dat2 <- dat
# Add time hours and minutes togehter
dat2 <- dat2 %>% mutate(
pass_time = paste0(dat$HOUR,"", dat$TIME, collapse = NULL)
)
View(dat2)
dat2 <- dat
# Add time hours and minutes togehter
dat2 <- dat2 %>% mutate(
pass_time = paste0(dat$HOUR,":", dat$TIME, collapse = NULL)
)
View(dat)
# Clean up the Time Column ----
# Remove AM/PM, milliseconds and instances where the hour is included in the TIME column.
dat <- dat %>%
mutate(
TIME = trimws(
# Removes the AM or PM (case insensitive) suffixes from the end of the string.
# Including AM or PM cases that have one or zero spaces before it "\\s?"
# Also trims the white spaces
sub("\\s?(AM|PM)+$", "", TIME, ignore.case = TRUE)
),
# Within the TIME column
# trim the milliseconds from the TIME data.
TIME = sub("\\.\\d+$", "", TIME)
)
# Remove the hours so that all time is presented in minutes and seconds.
# For each row in dat
for (i in 1:nrow(dat)) {
# If the length of the string is more than 5 chars.
if (nchar(dat$TIME[i]) > 5) {
# Substring to the last 5 characters. (Minutes and seconds)
dat$TIME[i] <- substr(
dat$TIME[i],
(nchar(dat$TIME[i]) - 4),
nchar(dat$TIME[i])
)
}
}
# Add time hours and minutes together
dat <- dat %>%
mutate(pass_time = paste0(dat$HOUR,":", dat$TIME))
-remove(dat2)
# Use separate_rows() to split rows where " and " is found
separate_rows(Manual.ID, sep = "(?i) and |,") %>%
# Retain all resulting rows without filtering anything out
mutate(Manual.ID = str_trim(Manual.ID))  # Clean up any extra spaces
# Add time hours and minutes together
dat <- dat %>%
mutate(pass_time = paste0(dat$HOUR,":", dat$TIME)) %>%
# Use separate_rows() to split rows where " and " is found
separate_rows(Manual.ID, sep = "(?i) and |,") %>%
# Retain all resulting rows without filtering anything out
mutate(Manual.ID = str_trim(Manual.ID))  # Clean up any extra spaces
# Add all .csv files from Data folder into a single object
csv_files <- list.files("Data", pattern = "\\.csv$", full.names = TRUE)
# Remove the from the object the our Species Translations
csv_files <- csv_files[!grepl("Species_Translations\\.csv$", csv_files)]
# Create a list of all the variables we want to keep.
dat_var_keep <- c("Year", "Fmin", "Fmean", "Fmax", "TIME", "HOUR", "MANUAL.ID", "Main.Habitat")
# Load in the Stradbroke data, to a large list DF
dat <- lapply(csv_files, read.csv, na.strings = c(""))
# Remove all rows that don't belong to dat_var_keep
dat <- lapply(dat, function(df) df[, dat_var_keep, drop = FALSE])
# Read in all data CSV's with names from the csv_files object, which now contains 4 data frames.
dat <- dat %>%
# Combine them into one data frame
bind_rows() %>%
# Rename the MANUAL ID column to Manual ID
rename(Manual.ID = MANUAL.ID) %>%
mutate(
# Change year to a factor
Year = factor(Year),
# Change Manual ID to a factor
Manual.ID = factor(Manual.ID),
# Change the name of Wet Heathland
Main.Habitat = ifelse(Main.Habitat == "wet heathland", "Wet Heathland", Main.Habitat)
)
# Clean up the Time Column ----
# Remove AM/PM, milliseconds and instances where the hour is included in the TIME column.
dat <- dat %>%
mutate(
TIME = trimws(
# Removes the AM or PM (case insensitive) suffixes from the end of the string.
# Including AM or PM cases that have one or zero spaces before it "\\s?"
# Also trims the white spaces
sub("\\s?(AM|PM)+$", "", TIME, ignore.case = TRUE)
),
# Within the TIME column
# trim the milliseconds from the TIME data.
TIME = sub("\\.\\d+$", "", TIME)
)
# Remove the hours so that all time is presented in minutes and seconds.
# For each row in dat
for (i in 1:nrow(dat)) {
# If the length of the string is more than 5 chars.
if (nchar(dat$TIME[i]) > 5) {
# Substring to the last 5 characters. (Minutes and seconds)
dat$TIME[i] <- substr(
dat$TIME[i],
(nchar(dat$TIME[i]) - 4),
nchar(dat$TIME[i])
)
}
}
# Add time hours and minutes together
dat <- dat %>%
mutate(pass_time = paste0(dat$HOUR,":", dat$TIME)) %>%
# Use separate_rows() to split rows where " and " is found
separate_rows(Manual.ID, sep = "(?i) and |,") %>%
# Retain all resulting rows without filtering anything out
mutate(Manual.ID = str_trim(Manual.ID))  # Clean up any extra spaces
# Load in the Stradbroke data, to a large list DF
dat <- lapply(csv_files, read.csv, na.strings = c(""))
# Remove all rows that don't belong to dat_var_keep
dat <- lapply(dat, function(df) df[, dat_var_keep, drop = FALSE])
# Read in all data CSV's with names from the csv_files object, which now contains 4 data frames.
dat <- dat %>%
# Combine them into one data frame
bind_rows() %>%
# Rename the MANUAL ID column to Manual ID
rename(Manual.ID = MANUAL.ID) %>%
mutate(
# Change year to a factor
Year = factor(Year),
# Change Manual ID to a factor
Manual.ID = factor(Manual.ID),
# Change the name of Wet Heathland
Main.Habitat = ifelse(Main.Habitat == "wet heathland", "Wet Heathland", Main.Habitat)
)
# Clean up the Time Column ----
# Remove AM/PM, milliseconds and instances where the hour is included in the TIME column.
dat <- dat %>%
mutate(
TIME = trimws(
# Removes the AM or PM (case insensitive) suffixes from the end of the string.
# Including AM or PM cases that have one or zero spaces before it "\\s?"
# Also trims the white spaces
sub("\\s?(AM|PM)+$", "", TIME, ignore.case = TRUE)
),
# Within the TIME column
# trim the milliseconds from the TIME data.
TIME = sub("\\.\\d+$", "", TIME)
)
# Remove the hours so that all time is presented in minutes and seconds.
# For each row in dat
for (i in 1:nrow(dat)) {
# If the length of the string is more than 5 chars.
if (nchar(dat$TIME[i]) > 5) {
# Substring to the last 5 characters. (Minutes and seconds)
dat$TIME[i] <- substr(
dat$TIME[i],
(nchar(dat$TIME[i]) - 4),
nchar(dat$TIME[i])
)
}
}
# Add time hours and minutes together
dat <- dat %>%
mutate(pass_time = paste0(dat$HOUR,":", dat$TIME)) %>%
# Use separate_rows() to split rows where " and " is found
separate_rows(Manual.ID, sep = "(?i) and |,") %>%
# Retain all resulting rows without filtering anything out
mutate(Manual.ID = str_trim(Manual.ID))  # Clean up any extra spaces
View(dat)
# For each Unique value in the dataset
for (i in 1:3) {cat("\n)")}
for (i in unique(dat$Manual.ID)) {
# Check if name already equals anything in our translations list.
if (!(i %in% translations))
{
# Check if you want to change the variable.
cut <- menu(choices = c("Yes","No","Quit"), title = paste("Do you want to rename:",i,"?"))
if (cut == 1)
{
print(paste("Rename:", i))
paste_name <- translations[menu(choices = translations, title = paste("What should:", i, "be changed to?"))]
dat <- dat %>%
mutate(Manual.ID = ifelse(Manual.ID == i, paste_name, Manual.ID))
print(paste("Renamed", i, "to", paste_name))
}
# If answered no.
else if (cut == 2)
{
# Change nothing and print that the value wasn't changed
print(paste("Not renaming value:", i))
}
# If Answered Quit
else if (cut == 3)
{
# Print that you're exiting the function.
print("Quitting Program")
break
}
}
}
source("C:/Users/user/Desktop/Bat Data/Bat Data/BatData/Scripts/ModifyData.R")
source("C:/Users/user/Desktop/Bat Data/Bat Data/BatData/Scripts/ModifyData.R")
source("C:/Users/user/Desktop/Bat Data/Bat Data/BatData/Scripts/ModifyData.R")
source("C:/Users/user/Desktop/Bat Data/Bat Data/BatData/Scripts/ModifyData.R")
source("C:/Users/user/Desktop/Bat Data/Bat Data/BatData/Scripts/ModifyData.R")
source("C:/Users/user/Desktop/Bat Data/Bat Data/BatData/Scripts/ModifyData.R")
View(dat)
# For each Unique value in the dataset
for (i in 1:3) {cat("\n)")}
for (i in unique(dat$Manual.ID)) {
# Check if name already equals anything in our translations list.
if (!(i %in% translations))
{
# Check if you want to change the variable.
cut <- menu(choices = c("Yes","No","Quit"), title = paste("Do you want to rename:",i,"?"))
if (cut == 1)
{
print(paste("Rename:", i))
paste_name <- translations[menu(choices = c(translations, "Cancel"), title = paste("What should:", i, "be changed to?"))]
# Checks to see if the user doesn't want to rename the bat.
if (is.na(paste_name)){
print(paste(i, "has been left as", i))
}
else {
dat <- dat %>%
mutate(Manual.ID = ifelse(Manual.ID == i, paste_name, Manual.ID))
print(paste("Renamed", i, "to", paste_name))
}
}
# If answered no.
else if (cut == 2)
{
# Change nothing and print that the value wasn't changed
print(paste(i, " has been left as ", i))
}
# If Answered Quit
else if (cut == 3)
{
# Print that you're exiting the function.
print("Quitting Program")
break
}
}
}
View(dat)
source("C:/Users/user/Desktop/Bat Data/Bat Data/BatData/Scripts/ModifyData.R")
View(dat)
is.na(paste_name)
View(dat)
# For each Unique value in the dataset
for (i in 1:3) {cat("\n)")}
for (i in unique(dat$Manual.ID)) {
# Check if name already equals anything in our translations list.
if (!(i %in% translations))
{
# Check if you want to change the variable.
cut <- menu(choices = c("Yes","No","Quit"), title = paste("Do you want to rename:",i,"?"))
if (cut == 1)
{
print(paste("Rename:", i))
paste_name <- translations[menu(choices = c(translations, "Cancel"), title = paste("What should:", i, "be changed to?"))]
# Checks to see if the user doesn't want to rename the bat.
if (is.na(paste_name)){
print(paste(i, "has been left as", i))
}
else {
dat <- dat %>%
mutate(Manual.ID = ifelse(Manual.ID == i, paste_name, Manual.ID))
print(paste("Renamed", i, "to", paste_name))
}
}
# If answered no.
else if (cut == 2)
{
# Change nothing and print that the value wasn't changed
print(paste(i, " has been left as ", i))
}
# If Answered Quit
else if (cut == 3)
{
# Print that you're exiting the function.
print("Quitting Program")
break
}
}
}
source("C:/Users/user/Desktop/Bat Data/Bat Data/BatData/Scripts/ModifyData.R")
nda
3
source("C:/Users/user/Desktop/Bat Data/Bat Data/BatData/Scripts/ModifyData.R")
source("C:/Users/user/Desktop/Bat Data/Bat Data/BatData/Scripts/ModifyData.R")
1
source("C:/Users/user/Desktop/Bat Data/Bat Data/BatData/Scripts/ModifyData.R")
dat$Manual.ID == NA
dat$Manual.ID == "Scot"
# Read in all data CSV's with names from the csv_files object, which now contains 4 data frames.
dat <- dat %>%
# Combine them into one data frame
bind_rows() %>%
# Rename the MANUAL ID column to Manual ID
rename(Manual.ID = MANUAL.ID) %>%
mutate(
# Change year to a factor
Year = factor(Year),
# Change Manual ID to a factor
Manual.ID = factor(Manual.ID),
# Change the name of Wet Heathland
Main.Habitat = ifelse(Main.Habitat == "wet heathland", "Wet Heathland", Main.Habitat)
)
# Add all .csv files from Data folder into a single object
csv_files <- list.files("Data", pattern = "\\.csv$", full.names = TRUE)
# Remove the from the object the our Species Translations
csv_files <- csv_files[!grepl("Species_Translations\\.csv$", csv_files)]
# Create a list of all the variables we want to keep.
dat_var_keep <- c("Year", "Fmin", "Fmean", "Fmax", "TIME", "HOUR", "MANUAL.ID", "Main.Habitat")
# Load in the Stradbroke data, to a large list DF
dat <- lapply(csv_files, read.csv, na.strings = c(""))
# Remove all rows that don't belong to dat_var_keep
dat <- lapply(dat, function(df) df[, dat_var_keep, drop = FALSE])
# Read in all data CSV's with names from the csv_files object, which now contains 4 data frames.
dat <- dat %>%
# Combine them into one data frame
bind_rows() %>%
# Rename the MANUAL ID column to Manual ID
rename(Manual.ID = MANUAL.ID) %>%
mutate(
# Change year to a factor
Year = factor(Year),
# Change Manual ID to a factor
Manual.ID = factor(Manual.ID),
# Change the name of Wet Heathland
Main.Habitat = ifelse(Main.Habitat == "wet heathland", "Wet Heathland", Main.Habitat)
)
# Clean up the Time Column ----
# Remove AM/PM, milliseconds and instances where the hour is included in the TIME column.
dat <- dat %>%
mutate(
TIME = trimws(
# Removes the AM or PM (case insensitive) suffixes from the end of the string.
# Including AM or PM cases that have one or zero spaces before it "\\s?"
# Also trims the white spaces
sub("\\s?(AM|PM)+$", "", TIME, ignore.case = TRUE)
),
# Within the TIME column
# trim the milliseconds from the TIME data.
TIME = sub("\\.\\d+$", "", TIME)
)
# Remove the hours so that all time is presented in minutes and seconds.
# For each row in dat
for (i in 1:nrow(dat)) {
# If the length of the string is more than 5 chars.
if (nchar(dat$TIME[i]) > 5) {
# Substring to the last 5 characters. (Minutes and seconds)
dat$TIME[i] <- substr(
dat$TIME[i],
(nchar(dat$TIME[i]) - 4),
nchar(dat$TIME[i])
)
}
}
# Add time hours and minutes together
dat <- dat %>%
mutate(pass_time = paste0(dat$HOUR,":", dat$TIME)) %>%
# Use separate_rows() to split rows where " and " is found
separate_rows(Manual.ID, sep = "(?i) and |,") %>%
# Retain all resulting rows without filtering anything out
mutate(Manual.ID = str_trim(Manual.ID))  # Clean up any extra spaces
dat_test <-  dat
dat_test$Manual.ID == NA
dat_test <- dat
dat_test$Manual.ID == "Scot"
View(dat)
unique(dat$Manual.ID)
source("C:/Users/user/Desktop/Bat Data/Bat Data/BatData/Scripts/ModifyData.R")
