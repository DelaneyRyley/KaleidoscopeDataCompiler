?source
if (dat_test[i, "Manual.ID"] %in% guilds) {
print(dat_test[i, "Manual.ID"])
}
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/ModifyData.R")
dat_test <- dat
-remove(df)
any(dat_test$Manual.ID == "Noise")
for (i in 5) {
print(dat_test[i, "Manual.ID"])
}
for (i in 1:5) {
print(dat_test[i, "Manual.ID"])
}
for (i in 1:5) {
print(dat_test[i])
}
print(dat_test[i])
for (i in 1:5) {
print(dat_test[i])
}
dat_test[1]
print(dat_test["Manual.ID"])
print(dat_test["Manual.ID",1])
print(dat_test[i, "Manual.ID"])
print(dat_test[1:5, "Manual.ID"])
print(dat_test[5, "Manual.ID"])
unique(guilds)
any(Noise == unique(guilds))
any("35khz" == unique(guilds))
print(as.matrix(guilds))
print(unique(as.matrix(guilds)))
print(unique(as.vector(guilds)))
?as.vector
print(unique(na.omit(as.vector(guilds))))
for (i in 1:5) {
if (dat_test[i, "Manual.ID"] == unique)
print(dat_test[i, "Manual.ID"])
}
print(dat_test[i, "Manual.ID"])
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/ModifyData.R")
print(dat_test[i, "Manual.ID"])
if (dat_test[i, "Manual.ID"] == unique(guilds))
for (i in 1:5) {
if (dat_test[i, "Manual.ID"] == unique(guilds))
{
print(dat_test[i, "Manual.ID"])
}
}
for (i in 1:5) {
if (any(dat_test[i, "Manual.ID"] == unique(guilds)))
{
print(dat_test[i, "Manual.ID"])
}
}
dat_test[1, "Manual.ID"]
any(dat_test[, "Manual.ID"]) == unique(guilds)
any(dat_test[, "Manual.ID"]) == unique(guilds))
any(dat_test[, "Manual.ID"] == unique(guilds))
unique(guilds)
dat_test[,"Manual.ID"]
?any
?sapply
sapply(dat_test, function(check) any(check == unique(guilds))
)
sapply(guilds, function(search) any(search == "35khz"))
any(TRUE)
x <- c(TRUE, FALSE, FALSE)
any(x)
y <- c(FALSE)
any(y)
print(dat_test[i, "Manual.ID"])
for (i in 1:5) {
if (any(sapply(guilds, function(search) any(search == dat_test[i. "Manual.ID"]))))
for (i in 1:5) {
if (any(sapply(guilds, function(search) any(search == dat_test[i, "Manual.ID"]))))
{
print(dat_test[i, "Manual.ID"])
}
}
for (i in 1:5) {
if (any(sapply(guilds, function(search) any(search == dat_test[i, "Manual.ID"]))))
{
print(dat_test[i, "Manual.ID"])
}
else
{
print("No values found")
}
}
{
print(dat_test[i, "Manual.ID"])
}
for (i in 1:nrow(dat_test)) {
if (any(sapply(guilds, function(search) any(search == dat_test[i, "Manual.ID"]))))
{
print(dat_test[i, "Manual.ID"])
}
}
print(i)
View(dat_test)
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/ModifyData.R")
for (i in 1:5) {
if (!is.na(dat_test[i, "Manual.ID"]))
{
print("Not NA")
}
if (any(sapply(guilds, function(search) any(search == dat_test[i, "Manual.ID"]))))
{
print(dat_test[i, "Manual.ID"])
}
}
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/ModifyData.R")
for (i in 1:nrow(dat_test)) {
if (!is.na(dat_test[i, "Manual.ID"]))
{
if (any(sapply(guilds, function(search) any(search == dat_test[i, "Manual.ID"]))))
{
print(dat_test[i, "Manual.ID"])
}
}
}
?mutate
# Source our functions
source("Scripts/Functions.R")
add_Guilds(dat_test)
# Write data including Column Titles
menu(choices = "Ok", title = "Please close any open CSV files to \n ensure R outputs without error.")
add_Guilds(dat_test)
# Source our functions
source("Scripts/Functions.R")
add_Guilds(dat_test)
# Source our functions
source("Scripts/Functions.R")
translate_Data(dat)
View(dat)
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/ModifyData.R")
View(dat)
View(dat)
View(dat_test)
dat <- dat %>%
# Use separate_rows() to split rows where " and " is found
separate_rows(Manual.ID, sep = "(?i) and |,") %>%
# Retain all resulting rows without filtering anything out
mutate(Manual.ID = str_trim(Manual.ID))  # Clean up any extra spaces
# Source our functions
source("Scripts/Functions.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/ModifyData.R")
# Source our functions
source("Scripts/Functions.R")
# Source our functions
source("Scripts/Functions.R")
?grepl
# Add all .csv files from Data folder into a single object
csv_files <- list.files("Data", pattern = "\\.csv$", full.names = TRUE)
# Remove the from the object the our Species Translations
csv_files <- csv_files[!grepl("Species_Translations\\.csv$|Guilds\\.csv$", csv_files)]
# Read in all the guild translation csv's
guilds <- read.csv("Excels/Guilds.csv", header = TRUE)
# Read in all the guild translation csv's
guilds <- read.csv("Data/Guilds.csv", header = TRUE)
# Load in Translations and Guilds ---------------------------------------------
load_Data()
# Source our functions
source("Scripts/Functions.R")
# Load in Translations and Guilds ---------------------------------------------
load_Data()
View(dat)
# Create a list of all the variables we want to keep.
dat_var_keep <- c("Year", "Fmin", "Fmean", "Fmax", "TIME", "HOUR", "MANUAL.ID", "Main.Habitat")
# Remove all rows that don't belong to dat_var_keep
dat <- lapply(dat, function(df) df[, dat_var_keep, drop = FALSE])
View(dat)
# Load in Data, Translations and Guilds ---------------------------------------------
load_Data()
# Create a list of all the variables we want to keep.
dat_var_keep <- c("Year", "Fmin", "Fmean", "Fmax", "TIME", "HOUR", "MANUAL.ID", "Main.Habitat")
# Remove all rows that don't belong to dat_var_keep
dat <- lapply(dat, function(df) df[, dat_var_keep, drop = FALSE])
# Combine all csv's into a single object
combine_csv(dat)
View(dat)
# Combine all csv's into a single object
combine_csv(dat)
# Combine all csv's into a single object
combine_csv(dat)
dat <- dat %>%
# Combine them into one data frame
bind_rows() %>%
# Change characters to factors
mutate_if(is.character, factor) %>%
# Rename the MANUAL ID column to Manual ID
rename(Manual.ID = MANUAL.ID) %>%
mutate(
# Change year to a factor
Year = factor(Year),
# Change Manual ID to a factor
Manual.ID = factor(Manual.ID),
# Change the name of Wet Heathland
Main.Habitat = ifelse(Main.Habitat == "wet heathland", "Wet Heathland", Main.Habitat)
# Read in all data CSV's with names from the csv_files object
dat <- dat %>%
# Read in all data CSV's with names from the csv_files object
dat <- dat %>%
# Combine them into one data frame
bind_rows() %>%
# Change characters to factors
mutate_if(is.character, factor) %>%
# Rename the MANUAL ID column to Manual ID
rename(Manual.ID = MANUAL.ID) %>%
mutate(
# Change year to a factor
Year = factor(Year),
# Change Manual ID to a factor
Manual.ID = factor(Manual.ID),
# Change the name of Wet Heathland
Main.Habitat = ifelse(Main.Habitat == "wet heathland", "Wet Heathland", Main.Habitat)
)
# Load in Data, Translations and Guilds ---------------------------------------------
load_Data()
# Create a list of all the variables we want to keep.
dat_var_keep <- c("Year", "Fmin", "Fmean", "Fmax", "TIME", "HOUR", "MANUAL.ID", "Main.Habitat")
# Remove all rows that don't belong to dat_var_keep
dat <- lapply(dat, function(df) df[, dat_var_keep, drop = FALSE])
# Combine all csv's into a single object
combine_csv(dat)
return(dat)
# Combine all csv's into a single object
combine_csv(dat)
# Combine all csv's into a single object
dat <- combine_csv(dat)
# Clean up the Time Column -----------------------------------------------------
dat <- rework_Time(dat)
View(dat)
# Clean up the Time Column -----------------------------------------------------
dat <- rework_Time(dat)
# Source our functions
source("Scripts/Functions.R")
# Clean up the Time Column -----------------------------------------------------
dat <- rework_Time(dat)
View(dat)
View(guilds)
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/ModifyData.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/ModifyData.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/ModifyData.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/ModifyData.R")
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds(dat)
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Functions.R")
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds(dat)
View(dat_test)
View(dat)
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds(dat)
View(dat)
?mutate
{
# Add new column of row guild
dat <- dat %>%
mutate(Guild = names(dat[sapply(dat, function(search) any(search == dat[i, "Manual.ID"]))]))
#print(dat[i, "Manual.ID"])
}
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds(dat)
View(dat)
# Source our functions
source("Scripts/Functions.R")
# Source our functions
source("Scripts/Functions.R")
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds(dat)
1 names(dat[sapply(dat, function(search) any(search == dat[i, "Manual.ID"]))]))
names(dat[sapply(dat, function(search) any(search == dat[1, "Manual.ID"]))]))
names(dat[sapply(dat, function(search) any(search == dat[1, "Manual.ID"]))])
# Source our functions
source("Scripts/Functions.R")
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds(dat)
View(guilds)
# Source our functions
source("Scripts/Functions.R")
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds(dat)
View(dat_test)
unique(dat_test$Guild)
View(dat_test)
# Load in Data, Translations and Guilds ---------------------------------------------
load_Data()
View(dat)
# Combine all csv's into a single object ---------------------------------------
dat <- combine_csv(dat)
# Create a list of all the variables we want to keep.
dat_var_keep <- c("Year", "Fmin", "Fmean", "Fmax", "TIME", "HOUR", "MANUAL.ID", "Main.Habitat")
# Remove all rows that don't belong to dat_var_keep
dat <- lapply(dat, function(df) df[, dat_var_keep, drop = FALSE])
# Install packages
library(data.table)
library(tidyverse)
# Source our functions
source("Scripts/Functions.R")
# Load in Data, Translations and Guilds ---------------------------------------------
load_Data()
# Create a list of all the variables we want to keep.
dat_var_keep <- c("Year", "Fmin", "Fmean", "Fmax", "TIME", "HOUR", "MANUAL.ID", "Main.Habitat")
# Remove all rows that don't belong to dat_var_keep
dat <- lapply(dat, function(df) df[, dat_var_keep, drop = FALSE])
# Combine all csv's into a single object ---------------------------------------
dat <- combine_csv(dat)
# Load in Data, Translations and Guilds ---------------------------------------------
load_Data()
# Remove all rows that don't belong to dat_var_keep
dat <- lapply(dat, function(df) df[, dat_var_keep, drop = FALSE])
View(dat)
# Source our functions
source("Scripts/Functions.R")
# Load in Data, Translations and Guilds ---------------------------------------------
load_Data()
# Create a list of all the variables we want to keep.
dat_var_keep <- c("Year", "Fmin", "Fmean", "Fmax", "TIME", "HOUR", "MANUAL.ID", "Main.Habitat")
# Remove all rows that don't belong to dat_var_keep
dat <- lapply(dat, function(df) df[, dat_var_keep, drop = FALSE])
View(dat)
# Combine all csv's into a single object ---------------------------------------
dat <- combine_csv(dat)
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/ModifyData.R")
View(dat)
View(dat_test)
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds2(dat)
# Source our functions
source("Scripts/Functions.R")
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds2(dat)
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds2(dat)
# Source our functions
source("Scripts/Functions.R")
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds2(dat)
# Source our functions
source("Scripts/Functions.R")
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds2(dat)
View(add_Guilds2)
View(dat_test)
unique(dat_test$Guild)
-remove(dat_test)
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds2(dat)
View(dat_test)
View(guilds)
unique(dat$Manual.ID)
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/ModifyData.R")
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds2(dat)
View(dat_test)
View(dat_test)
unique(dat_test$Guild)
View(dat)
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds2(dat)
View(dat_test)
# Source our functions
source("Scripts/Functions.R")
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds2(dat)
View(dat_test)
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds2(dat)
-remove(dat_test)
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds2(dat)
View(dat_test)
matched_guild <- c(TRUE, FALSE, FALSE, FALSE)
colnames(guilds)[matched_guild]
# Source our functions
source("Scripts/Functions.R")
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds2(dat)
View(dat_test)
# Source our functions
source("Scripts/Functions.R")
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds2(dat)
View(dat_test)
?unlist
g <- unlist(guilds)
g
dat$Manual.ID %in% unlist(guilds)
# Source our functions
source("Scripts/Functions.R")
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds2(dat)
View(guilds)
class(dat$Manual.ID)
class(guilds)
class(guilds$Clutter)
# Source our functions
source("Scripts/Functions.R")
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds2(dat)
# Source our functions
source("Scripts/Functions.R")
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds2(dat)
# Source our functions
source("Scripts/Functions.R")
# Add Guilds to Dataframe -------------------------------------------------
dat_test <- add_Guilds3(dat)
View(dat_test)
# Source our functions
source("Scripts/Functions.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Functions.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/ModifyData.R")
View(dat_test)
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/ModifyData.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/ModifyData.R")
# Source our functions
source("Scripts/Functions.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/ModifyData.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/ModifyData.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/ModifyData.R")
# Add Guilds to Dataframe -------------------------------------------------
dat <- add_Guilds(dat)
View(dat)
source("C:/Users/user/Desktop/Bat Data/Bat Data/BatData/Scripts/ModifyData.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
rlang::last_trace()
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Functions.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
View(dat)
# Add Guilds to Dataframe -------------------------------------------------
dat <- left_join(guilds, by = c("Manual.ID" = "Complexes"))
# Add Guilds to Dataframe -------------------------------------------------
dat <- dat %>%
left_join(guilds, by = c("Manual.ID" = "Complexes"))
View(guilds)
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
1
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Functions.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Functions.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
View(guilds)
View(guilds)
View(dat)
View(guilds)
View(dat)
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
is.null(NULL)
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
?is.null
?is_null
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
for (i in unique(dat$Manual.ID)) {
count <- ++
}
count <- 0
for (i in unique(dat$Manual.ID)) {
count <- ++
}
for (i in unique(dat$Manual.ID)) {
count <- count + 1
}
for (i in unique(dat$Manual.ID)) {
print(i)
}
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
View(dat)
View(dat)
View(translations)
View(guilds)
View(dat)
member(dat$Manual.ID)
class(dat$Manual.ID)
class(guilds$Complexes)
# Add Guilds to Dataframe -------------------------------------------------
dat <- dat %>%
left_join(guilds, by = c("Manual.ID" = as.list("Complexes")))
View(guilds)
# Load in Data, Translations and Guilds ---------------------------------------------
load_Data()
# Remove all rows that don't belong to dat_var_keep
dat <- lapply(dat, function(df)
df[, dat_var_keep, drop = FALSE])
# Combine all csv's into a single object ---------------------------------------
dat <- combine_csv(dat)
class(dat$Manual.ID)
# Add Guilds to Dataframe -------------------------------------------------
dat <- dat %>%
left_join(guilds, by = c(as.char("Manual.ID") = "Complexes"))
# Add Guilds to Dataframe -------------------------------------------------
dat$Manual.ID <- as.character(dat$Manual.ID)
dat <- dat %>%
left_join(guilds, by = c("Manual.ID" = "Complexes"))
source("C:/Users/Ryley/Desktop/Oakleigh Project/BatData/Scripts/Main.R")
View(dat)
